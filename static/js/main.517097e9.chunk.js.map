{"version":3,"sources":["config.js","sections/One.js","sections/Two.js","sections/Three.js","components/svg-shape.js","App.js","hooks/use-window-size.js","hooks/use-document-height.js","serviceWorker.js","index.js"],"names":["shapes","startColor","stopColor","path","sections","component","id","pathConfigs","map","split","s","trim","filter","Boolean","r","coords","Number","computePathString","pathFrom","pathTo","progress","p","i","j","k","a","join","computeColor","colorFrom","colorTo","ah","replace","ar","ag","ab","bh","toString","slice","SVGShape","scrollY","sectionHeights","useState","anchors","setAnchors","setPath","gradient","setGradient","useEffect","length","reduce","arr","height","document","body","offsetHeight","console","group","globalScroll","window","innerHeight","log","sectionProgress","groupEnd","viewBox","version","preserveAspectRatio","x1","y1","x2","y2","offset","d","fill","App","refs","useMemo","createRef","setScrollY","setSectionHeights","size","setSize","useLayoutEffect","updateSize","innerWidth","addEventListener","removeEventListener","useWindowSize","windowWidth","windowHeight","docHeight","setDocHeight","observer","ResizeObserver","bodyEntry","contentRect","observe","unobserve","useDocumentHeight","useScrollPosition","currPos","y","ref","current","key","React","createElement","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.517097e9.chunk.js","sourcesContent":["import One from './sections/One';\nimport Three from './sections/Three';\nimport Two from './sections/Two';\n\nexport const shapes = [\n  {\n    startColor: '#272EC3',\n    stopColor: '#3579DE',\n    path: 'M0,289.5 C126.666667,275.166667 222,262.5 286,251.5 C382,235 400.5,205 428,174.5 C455.5,144 486.189448,100.5 541.844724,75.5 C578.948241,58.8333333 679,35.3333333 842,5 L842,399.5 L0,399.5 L0,289.5 Z'\n  },\n  {\n    startColor: '#EF8835',\n    stopColor: '#F2AA3C',\n    path: 'M0,198.677852 C67.4962329,130.892617 135.329566,97 203.5,97 C305.755651,97 356,200.711409 421,199.694631 C486,198.677852 591,97 671.5,97 C725.166667,97 782,130.892617 842,198.677852 L842,400 L0,400 L0,198.677852 Z'\n  },\n  {\n    startColor: '#57B53A',\n    stopColor: '#56EF35',\n    path: 'M0,200.5 C177.496233,134.833333 300.329566,102 368.5,102 C470.755651,102 552,304.5 616.5,304.5 C681,304.5 675.5,265.055556 731.5,265 C768.833333,264.962963 805.666667,295.148148 842,355.555556 L842,400 L0,400 L0,200.5 Z'\n  },\n  {\n    startColor: '#5B37C1',\n    stopColor: '#6F2CCB',\n    path: 'M0,201.825184 C41.6666667,325.601037 102,336.277121 181,233.853437 C299.5,80.2179107 378.5,87.7245325 443.5,139.270002 C508.5,190.815472 585,310.921421 665.5,310.921421 C719.166667,310.921421 778,274.556009 842,201.825184 L842,400 L0,400 L0,201.825184 Z'\n  }\n];\n\n\nexport const sections = [\n  {\n    component: One,\n    // backgroundColor: 'yellowgreen',\n  },\n  {\n    component: Two,\n    // backgroundColor: 'orange'\n  },\n  {\n    component: Three,\n    // backgroundColor: 'purple'\n  },\n];\n","import React from 'react';\n\nconst One = () => (\n  <section id=\"one\">\n    <h1>One</h1>\n  </section>\n);\n\nexport default One;\n","import React from 'react';\n\nconst Two = () => (\n  <section id=\"two\">\n    <h1>Two</h1>\n  </section>\n);\n\nexport default Two;\n","import React from 'react';\n\nconst Three = () => (\n  <section id=\"three\">\n    <h1>Three</h1>\n  </section>\n);\n\nexport default Three;\n","import React, { useEffect, useState } from 'react';\nimport { shapes } from '../config';\n\n\nconst pathConfigs = shapes.map(({ path }) => {\n  return path.split(/M|C|L|Z/)\n                      .map(s => s.trim())\n                      .filter(Boolean)\n                      .map(r => {\n                        return r.split(/\\s/g)\n                                .map(coords => coords.split(',').map(Number))\n                      });\n});\n\n\nconst computePathString = (pathFrom, pathTo, progress) => {\n  const p = (i, j, k) => {\n    const [a, b] = [pathFrom[i][j][k], pathTo[i][j][k]];\n    return a - (a - b) * progress;\n  };\n\n  return `\n    M${p(0, 0, 0)},${p(0, 0, 1)}\n    C${p(1, 0, 0)},${p(1, 0, 1)} ${p(1, 1, 0)},${p(1, 1, 1)} ${p(1, 2, 0)},${p(1, 2, 1)}\n    C${p(2, 0, 0)},${p(2, 0, 1)} ${p(2, 1, 0)},${p(2, 1, 1)} ${p(2, 2, 0)},${p(2, 2, 1)}\n    C${p(3, 0, 0)},${p(3, 0, 1)} ${p(3, 1, 0)},${p(3, 1, 1)} ${p(3, 2, 0)},${p(3, 2, 1)}\n    C${p(4, 0, 0)},${p(4, 0, 1)} ${p(4, 1, 0)},${p(4, 1, 1)} ${p(4, 2, 0)},${p(4, 2, 1)}\n    L${p(5, 0, 0)},${p(5, 0, 1)}\n    L${p(6, 0, 0)},${p(6, 0, 1)}\n    L${p(7, 0, 0)},${p(7, 0, 1)} Z\n  `.split(/\\n/).filter(Boolean).join(' ');\n};\n\nconst computeColor = (colorFrom, colorTo, progress) => {\n  // https://gist.github.com/rosszurowski/67f04465c424a9bc0dae\n  const ah = +colorFrom.replace('#', '0x'),\n  ar = ah >> 16, ag = ah >> 8 & 0xff, ab = ah & 0xff,\n  bh = +colorTo.replace('#', '0x'),\n  br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n  rr = ar + progress * (br - ar),\n  rg = ag + progress * (bg - ag),\n  rb = ab + progress * (bb - ab);\n\n  return '#' + ((1 << 24) + (rr << 16) + (rg << 8) + rb | 0).toString(16).slice(1);\n};\n\n\nconst SVGShape = ({ scrollY, sectionHeights }) => {\n  const [anchors, setAnchors] = useState([]);\n  const [path, setPath] = useState(shapes[0].path);\n  const [gradient, setGradient] = useState([shapes[0].startColor, shapes[0].stopColor]);\n\n  /*\n    Each times the sections height change, prepare an array with anchors :\n    [\n      0,     // <- top of first section\n      0.50, // <- bottom of first section / top of second section\n      0.7, // ...\n      1    // <- end of last section\n    ]\n    All values are in percentage of the whole body height\n  */\n  useEffect(() => {\n    if (!sectionHeights.length) {\n      return;\n    }\n\n    setAnchors(\n      sectionHeights.reduce((arr, height) => [\n        ...arr,\n        arr[arr.length -1] + (height / document.body.offsetHeight)\n      ], [0])\n    );\n  }, [sectionHeights]);\n\n\n  /*\n    For the time being, we have n+1 shapes than we have sections, which means each section is \"between\" two shapes, and thus, the interpolation between these shapes must be spread proportionnaly to each section height.\n\n    On scroll, we detect the percentage of the whole page body the user has scrolled so far.\n    With this value, we can detect which shapes we have to interpolate between, by using the previouly computed \"anchors\".\n    Let's say we did compute those anchors: [0, 0.5, 0.7, 1], and the current page scroll is 0.6, we know we are currently scrolling between the second and the third section.\n\n    To reflect the interpolation \"duration\" according to the currently scrolled section height,\n    we also compute the \"scroll progress\" from the current to the next section.\n\n    We apply the same exact logic for the colors transitions.\n  */\n  useEffect(() => {\n    console.group('scroll-logs');\n\n    const globalScroll = scrollY / (document.body.offsetHeight - window.innerHeight);\n    console.log('Percentage scrolled in whole page is', globalScroll);\n\n    for (let i = 1; i < anchors.length; i++) {\n      if (globalScroll <= anchors[i]) {\n        console.log('Current section =>', i);\n        const sectionProgress = (globalScroll - anchors[i - 1]) / (anchors[i] - anchors[i - 1]);\n        setPath(computePathString(pathConfigs[i - 1], pathConfigs[i], sectionProgress));\n        setGradient([\n          computeColor(shapes[i - 1].startColor, shapes[i].startColor, sectionProgress),\n          computeColor(shapes[i - 1].stopColor, shapes[i].stopColor, sectionProgress),\n        ]);\n        break;\n      }\n    }\n\n    console.groupEnd('scroll-logs');\n  }, [scrollY, anchors]);\n\n\n  if (!path) {\n    return null;\n  }\n\n  return (\n    <div id=\"svg-shape\">\n      <svg viewBox=\"0 0 842 400\" version=\"1.1\" preserveAspectRatio=\"none\">\n        <defs>\n            <linearGradient x1=\"50%\" y1=\"100%\" x2=\"50%\" y2=\"-2.48949813e-15%\" id=\"linearGradient-1\">\n                <stop stopColor={gradient[0]} offset=\"0%\"></stop>\n                <stop stopColor={gradient[1]} offset=\"100%\"></stop>\n            </linearGradient>\n        </defs>\n        <path d={path} fill=\"url(#linearGradient-1)\"></path>\n      </svg>\n    </div>\n  );\n};\n\nexport default SVGShape;\n","import { useScrollPosition } from '@n8tb1t/use-scroll-position';\nimport React, { createRef, useEffect, useMemo, useState } from 'react';\nimport './App.css';\nimport SVGShape from './components/svg-shape';\nimport { sections } from './config';\nimport { useDocumentHeight } from './hooks/use-document-height';\nimport { useWindowSize } from './hooks/use-window-size';\n\nfunction App() {\n  const refs= useMemo(() => sections.map(() => createRef()), []);\n  const [scrollY, setScrollY] = useState(0);\n  const [sectionHeights, setSectionHeights] = useState([]);\n  const [windowWidth, windowHeight] = useWindowSize();\n  const docHeight = useDocumentHeight();\n\n  useScrollPosition(({ currPos }) => setScrollY(- currPos.y), []);\n  useEffect(() => {\n    const sectionHeights = refs.map(ref => ref.current.offsetHeight);\n    setSectionHeights(sectionHeights);\n  }, [refs, windowWidth, windowHeight, docHeight]);\n\n  return (\n    <div>\n      <SVGShape scrollY={scrollY} sectionHeights={sectionHeights} />\n      <main>\n        {\n          sections.map(({ component }, i) => (\n            <div key={i} ref={refs[i]}>\n              { React.createElement(component) }\n            </div>\n          ))\n        }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n// TODO -> detect change of any section height -> recompute sectionHeights\n","import { useLayoutEffect, useState } from 'react';\n\nexport function useWindowSize() {\n  const [size, setSize] = useState([0, 0]);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n\n  return size;\n}\n","import { ResizeObserver } from '@juggle/resize-observer';\nimport { useLayoutEffect, useState } from 'react';\n\nexport function useDocumentHeight() {\n  const [docHeight, setDocHeight] = useState(document.body.innerHeight);\n\n  useLayoutEffect(() => {\n    const observer = new ResizeObserver(([bodyEntry, ...unused]) => {\n      setDocHeight(bodyEntry.contentRect.height);\n    })\n    observer.observe(document.body);\n\n    return () => observer.unobserve(document.body);\n  }, []);\n\n  return docHeight;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}